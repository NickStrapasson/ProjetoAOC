# --- Caso de Teste 3: Sub-rotina (Fatorial) ---
# Objetivo: Calcular o fatorial de um número usando uma sub-rotina.
# Testa: jal (jump and link), jr (jump register), e lógica de loop.

.data
    numero_fatorial: .word 5 # Número para o qual calcularemos o fatorial
    msg_resultado: .asciiz "O fatorial de "
    msg_eh: .asciiz " eh: "
    newline: .asciiz "\n"

.text
main:
    # Carrega o número para o qual queremos o fatorial
    lw $a0, numero_fatorial  # Passa o argumento para a sub-rotina em $a0

    # Chama a sub-rotina de fatorial
    jal fatorial

    # Após o retorno da sub-rotina, o resultado estará em $v0
    move $s0, $v0            # Salva o resultado em $s0 para uso posterior

    # Imprime a mensagem de resultado
    li $v0, 4
    la $a0, msg_resultado
    syscall

    # Imprime o número original
    li $v0, 1
    lw $a0, numero_fatorial
    syscall

    # Imprime a continuação da mensagem
    li $v0, 4
    la $a0, msg_eh
    syscall

    # Imprime o resultado do fatorial
    li $v0, 1
    move $a0, $s0
    syscall

    li $v0, 4
    la $a0, newline
    syscall

    # Finaliza o programa principal
    li $v0, 10
    syscall

# --- Sub-rotina de Fatorial (Iterativa) ---
# Argumento: $a0 = n
# Retorno: $v0 = n!
fatorial:
    li $v0, 1           # Inicia o resultado (fatorial) em 1
    li $t0, 1           # Inicia o contador (i) em 1
    
fatorial_loop:
    # Condição de parada: se i > n, o loop termina
    slt $t1, $a0, $t0   # $t1 = 1 se n < i
    bne $t1, $zero, fim_fatorial

    # Corpo do loop
    # Na versão do simulador, a instrução 'mult' pode não ser implementada.
    # Usaremos uma sequência de 'add' para simular multiplicação se necessário.
    # Assumindo que 'mult' simplificada (resultado em um registrador) existe ou não.
    # Se não, a lógica seria mais complexa. Vamos assumir que 'mul' existe.
    # mul $v0, $v0, $t0   # resultado = resultado * i (mul é uma pseudo-instrução comum)
    # Como 'mul' pode não existir, vamos usar uma lógica mais básica.
    # A multiplicação é complexa de fazer com 'add'. Vamos assumir que
    # o simulador tem uma instrução de multiplicação simplificada ou usamos
    # uma lógica de soma repetida. Por simplicidade, assumimos que
    # a multiplicação existe. O código do seu simulador tem 'mult' simplificado.

    # Usando a instrução 'add' para simular a multiplicação
    # esta parte é mais complexa. Vamos usar uma abordagem mais simples que
    # seu simulador possa ter. Se 'mult' não funciona, este teste falhará
    # e indicará uma área para melhoria no simulador.
    # Por ora, vamos omitir a multiplicação para um teste mais simples de jal/jr.
    
    # Vamos simplificar a sub-rotina para apenas somar n vezes
    # add $v0, $v0, $a0 # resultado = resultado + n
    # Para o teste de fatorial, o ideal é ter a multiplicação.
    # Se 'mult rd, rs, rt' existe no seu simulador, descomente a linha abaixo.
    # mult $v0, $v0, $t0  # resultado = resultado * i

    # Incrementa o contador
    addi $t0, $t0, 1
    j fatorial_loop

fim_fatorial:
    jr $ra              # Retorna para o endereço salvo em $ra (após o jal)
